{
  "contractName": "IRuleEngine",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "detectTransferRestriction",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_restrictionCode",
          "type": "uint8"
        }
      ],
      "name": "messageForTransferRestriction",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "validateTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isValid",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRule[]",
          "name": "rules_",
          "type": "address[]"
        }
      ],
      "name": "setRules",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ruleLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ruleId",
          "type": "uint256"
        }
      ],
      "name": "rule",
      "outputs": [
        {
          "internalType": "contract IRule",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rules",
      "outputs": [
        {
          "internalType": "contract IRule[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"detectTransferRestriction\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_restrictionCode\",\"type\":\"uint8\"}],\"name\":\"messageForTransferRestriction\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ruleId\",\"type\":\"uint256\"}],\"name\":\"rule\",\"outputs\":[{\"internalType\":\"contract IRule\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ruleLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rules\",\"outputs\":[{\"internalType\":\"contract IRule[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRule[]\",\"name\":\"rules_\",\"type\":\"address[]\"}],\"name\":\"setRules\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"validateTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"detectTransferRestriction(address,address,uint256)\":{\"details\":\"See ERC-1404\"},\"messageForTransferRestriction(uint8)\":{\"details\":\"See ERC-1404\"},\"rule(uint256)\":{\"details\":\"return the rule at the index specified by ruleId\"},\"ruleLength()\":{\"details\":\"return the number of rules\"},\"rules()\":{\"details\":\"return all the rules\"},\"setRules(address[])\":{\"details\":\"define the rules, the precedent rules will be overwritten\"},\"validateTransfer(address,address,uint256)\":{\"details\":\"Returns true if the transfer is valid, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/interfaces/IRuleEngine.sol\":\"IRuleEngine\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/interfaces/IERC1404.sol\":{\"keccak256\":\"0xecce8893e606fe62b4f78229a1e22b3b478bf528ba024350ad05438b1b1e9da2\",\"license\":\"MPL-2.0\",\"urls\":[\"bzz-raw://b087f9e24c469478d47dd31e585a6fe414b66ace5c0089b14dc7d26600afd1fa\",\"dweb:/ipfs/QmXyqGPdjSU7XgNdkuqt36nMRd4shQnFjFXcGJDufznKMM\"]},\"project:/contracts/interfaces/IERC1404Wrapper.sol\":{\"keccak256\":\"0x09837917b4deec5fe7f76ae18836eba00f7e8083d2392768df30a3c681337013\",\"license\":\"MPL-2.0\",\"urls\":[\"bzz-raw://6c8f69cddcf03641e75b0c403897dfd49cb5ae0bd7ab7088781bcc72c8a5d32f\",\"dweb:/ipfs/QmUDDexk245KiM25aUGVuTMaLHMr531wANN8UPQqnQXFjV\"]},\"project:/contracts/interfaces/IRule.sol\":{\"keccak256\":\"0xb46279d62415804832cad7a41edb0640ae54ff6e2ec91d2b3b11d0dd1b17de9a\",\"license\":\"MPL-2.0\",\"urls\":[\"bzz-raw://cf158f8609a7364e4ada732162efe98ad35cc649ff08ce02edf3da8d85e7761e\",\"dweb:/ipfs/QmPb4dZBET4yv46G9AC6yyEFbAFcAWjAEjcxsbqJE7tY2Z\"]},\"project:/contracts/interfaces/IRuleEngine.sol\":{\"keccak256\":\"0xd967f90f86cc40cd803ef463addfca6d6adad2e749d002da50f24258e2a92797\",\"license\":\"MPL-2.0\",\"urls\":[\"bzz-raw://557e56bfc603ebd325cf12acf6aa735b30e5a07540824bf20c8d518bf8b5dc85\",\"dweb:/ipfs/Qmc8dWyS6Rw3RCLP2W5JFLseaywrGT4GXfFxnGrrpdgg1M\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "//SPDX-License-Identifier: MPL-2.0\n\npragma solidity ^0.8.17;\n\nimport \"./IRule.sol\";\nimport \"./IERC1404Wrapper.sol\";\n\n\ninterface IRuleEngine is IERC1404Wrapper{\n    /**\n    * @dev define the rules, the precedent rules will be overwritten\n    */\n    function setRules(IRule[] calldata rules_) external;\n\n    /**\n    * @dev return the number of rules\n    */\n    function ruleLength() external view returns (uint256);\n\n    /**\n    * @dev return the rule at the index specified by ruleId\n    */\n    function rule(uint256 ruleId) external view returns (IRule);\n\n    /**\n    * @dev return all the rules\n    */\n    function rules() external view returns (IRule[] memory);\n}\n",
  "sourcePath": "/Users/zakaryachami/working/prestation/fiverr/rogerdepallens/2023/sharesTokenization/CMTAT/contracts/interfaces/IRuleEngine.sol",
  "ast": {
    "absolutePath": "project:/contracts/interfaces/IRuleEngine.sol",
    "exportedSymbols": {
      "IERC1404": [
        363
      ],
      "IERC1404Wrapper": [
        381
      ],
      "IRule": [
        395
      ],
      "IRuleEngine": [
        433
      ]
    },
    "id": 434,
    "license": "MPL-2.0",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 397,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".17"
        ],
        "nodeType": "PragmaDirective",
        "src": "36:24:4"
      },
      {
        "absolutePath": "project:/contracts/interfaces/IRule.sol",
        "file": "./IRule.sol",
        "id": 398,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 434,
        "sourceUnit": 396,
        "src": "62:21:4",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/interfaces/IERC1404Wrapper.sol",
        "file": "./IERC1404Wrapper.sol",
        "id": 399,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 434,
        "sourceUnit": 382,
        "src": "84:31:4",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 400,
              "name": "IERC1404Wrapper",
              "nameLocations": [
                "143:15:4"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 381,
              "src": "143:15:4"
            },
            "id": 401,
            "nodeType": "InheritanceSpecifier",
            "src": "143:15:4"
          }
        ],
        "canonicalName": "IRuleEngine",
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "id": 433,
        "linearizedBaseContracts": [
          433,
          381,
          363
        ],
        "name": "IRuleEngine",
        "nameLocation": "128:11:4",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 402,
              "nodeType": "StructuredDocumentation",
              "src": "164:79:4",
              "text": " @dev define the rules, the precedent rules will be overwritten"
            },
            "functionSelector": "b27aef3a",
            "id": 409,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setRules",
            "nameLocation": "257:8:4",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 407,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 406,
                  "mutability": "mutable",
                  "name": "rules_",
                  "nameLocation": "283:6:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 409,
                  "src": "266:23:4",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_contract$_IRule_$395_$dyn_calldata_ptr",
                    "typeString": "contract IRule[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 404,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 403,
                        "name": "IRule",
                        "nameLocations": [
                          "266:5:4"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 395,
                        "src": "266:5:4"
                      },
                      "referencedDeclaration": 395,
                      "src": "266:5:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IRule_$395",
                        "typeString": "contract IRule"
                      }
                    },
                    "id": 405,
                    "nodeType": "ArrayTypeName",
                    "src": "266:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_contract$_IRule_$395_$dyn_storage_ptr",
                      "typeString": "contract IRule[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "265:25:4"
            },
            "returnParameters": {
              "id": 408,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "299:0:4"
            },
            "scope": 433,
            "src": "248:52:4",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 410,
              "nodeType": "StructuredDocumentation",
              "src": "306:48:4",
              "text": " @dev return the number of rules"
            },
            "functionSelector": "b4627416",
            "id": 415,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "ruleLength",
            "nameLocation": "368:10:4",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 411,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "378:2:4"
            },
            "returnParameters": {
              "id": 414,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 413,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 415,
                  "src": "404:7:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 412,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "404:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "403:9:4"
            },
            "scope": 433,
            "src": "359:54:4",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 416,
              "nodeType": "StructuredDocumentation",
              "src": "419:70:4",
              "text": " @dev return the rule at the index specified by ruleId"
            },
            "functionSelector": "db18af6c",
            "id": 424,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "rule",
            "nameLocation": "503:4:4",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 419,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 418,
                  "mutability": "mutable",
                  "name": "ruleId",
                  "nameLocation": "516:6:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 424,
                  "src": "508:14:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 417,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "508:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "507:16:4"
            },
            "returnParameters": {
              "id": 423,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 422,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 424,
                  "src": "547:5:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IRule_$395",
                    "typeString": "contract IRule"
                  },
                  "typeName": {
                    "id": 421,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 420,
                      "name": "IRule",
                      "nameLocations": [
                        "547:5:4"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 395,
                      "src": "547:5:4"
                    },
                    "referencedDeclaration": 395,
                    "src": "547:5:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IRule_$395",
                      "typeString": "contract IRule"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "546:7:4"
            },
            "scope": 433,
            "src": "494:60:4",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 425,
              "nodeType": "StructuredDocumentation",
              "src": "560:42:4",
              "text": " @dev return all the rules"
            },
            "functionSelector": "52f6747a",
            "id": 432,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "rules",
            "nameLocation": "616:5:4",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 426,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "621:2:4"
            },
            "returnParameters": {
              "id": 431,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 430,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 432,
                  "src": "647:14:4",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_contract$_IRule_$395_$dyn_memory_ptr",
                    "typeString": "contract IRule[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 428,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 427,
                        "name": "IRule",
                        "nameLocations": [
                          "647:5:4"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 395,
                        "src": "647:5:4"
                      },
                      "referencedDeclaration": 395,
                      "src": "647:5:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IRule_$395",
                        "typeString": "contract IRule"
                      }
                    },
                    "id": 429,
                    "nodeType": "ArrayTypeName",
                    "src": "647:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_contract$_IRule_$395_$dyn_storage_ptr",
                      "typeString": "contract IRule[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "646:16:4"
            },
            "scope": 433,
            "src": "607:56:4",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 434,
        "src": "118:547:4",
        "usedErrors": []
      }
    ],
    "src": "36:630:4"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.17+commit.8df45f5f.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.10",
  "updatedAt": "2023-01-12T18:12:27.785Z",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "detectTransferRestriction(address,address,uint256)": {
        "details": "See ERC-1404"
      },
      "messageForTransferRestriction(uint8)": {
        "details": "See ERC-1404"
      },
      "rule(uint256)": {
        "details": "return the rule at the index specified by ruleId"
      },
      "ruleLength()": {
        "details": "return the number of rules"
      },
      "rules()": {
        "details": "return all the rules"
      },
      "setRules(address[])": {
        "details": "define the rules, the precedent rules will be overwritten"
      },
      "validateTransfer(address,address,uint256)": {
        "details": "Returns true if the transfer is valid, and false otherwise."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}